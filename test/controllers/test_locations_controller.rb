# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class LocationsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.locations
    @response_catcher = @controller.http_call_back
  end

  # This API provides the list of all Shell Recharge locations. The list includes all Shell Recharge network and all locations available through our roaming partners. The end point provides flexible search criteria in order to get the list of Shell Recharge Network. The end point provides the details such as the exact location/address of the site along with the up-to-date status information of all the charging units in the site. 
  #
  #Supported Search Options
  #
  #* Based on status of the Charging units. Eg : Available or Occupied
  #* Based on available connector types.
  #* Based on minimum Power output (in kW) available
  #* Based on a specific charging unit ID (EVSE ID)
  def test_get_ev_locations
    # Parameters for the API call
    request_id = '123e4567-e89b-12d3-a456-426614174000'
    evse_status = nil
    connector_types = nil
    connector_min_power = nil
    authorization_methods = nil
    with_operator_name = nil
    evse_id = 'NL*TNM*E01000401*0'
    location_external_id = nil
    evse_external_id = nil
    page_number = nil
    per_page = nil
    updated_since = nil
    country = APIHelper.json_deserialize(
      '["NED"]', false)
    exclude_country = APIHelper.json_deserialize(
      '["NED"]', false)

    # Perform the API call through the SDK function
    result = @controller.get_ev_locations(
      request_id, evse_status: evse_status, connector_types: connector_types,
      connector_min_power: connector_min_power,
      authorization_methods: authorization_methods,
      with_operator_name: with_operator_name, evse_id: evse_id,
      location_external_id: location_external_id,
      evse_external_id: evse_external_id, page_number: page_number,
      per_page: per_page, updated_since: updated_since, country: country,
      exclude_country: exclude_country
    )

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end