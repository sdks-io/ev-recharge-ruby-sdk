# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # ChargingController
  class ChargingController < BaseController
    # This API initiates to start a session on a EVSE (Electric Vehicle Supply
    # Equipement). When the EV Charge Card number and the unique EVSE ID on the
    # location is provided, the session is initiated.
    # Please note that this is an asynchronous request, the request will be
    # passed on to the operator/platform to be processed further.
    # @param [UUID | String] request_id Required parameter: A unique request id
    # in GUID format. The value is written to the Shell API Platform audit log
    # for end to end traceability of a request.
    # @param [ChargesessionStartBody] body Optional parameter: Example:
    # @return [InlineResponse202] response from the API call
    def start_charge_session(request_id,
                             body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/ev/v1/charge-session/start',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(InlineResponse202.method(:from_hash))
                   .local_error('400',
                                "Bad Request\n",
                                M400ErrorResponseError1Exception)
                   .local_error('401',
                                'Unauthorized',
                                HTTP401ErrorResponseException)
                   .local_error('404',
                                "Invalid charge token with given EmaId was not found.\n\nBackend'\
                                 ' HTTP 410 should be transformed to 404.",
                                M404ErrorResponseError1Exception)
                   .local_error('405',
                                'Method Not Allowed',
                                M405ErrorResponseError1Exception)
                   .local_error('429',
                                'Too Many Requests',
                                M429ErrorResponseError1Exception)
                   .local_error('500',
                                'Internal Server Error',
                                M500ErrorResponseError1Exception)
                   .local_error('503',
                                'Returned when a connectivity failure is encountered like DB'\
                                 ' connection failed, endpoint failed etc or when max number of'\
                                 ' retries are completed',
                                M503ErrorResponseError1Exception))
        .execute
    end

    # This API stops a session by providing the session ID which was retrieved
    # when starting the session. HTTP 202 response will be returned if the
    # request is accepted. Once the session is stopped the response will contain
    # the DateTime on which it is stopped.      operationId: Stop
    # @param [UUID | String] request_id Required parameter: A unique request id
    # in GUID format. The value is written to the Shell API Platform audit log
    # for end to end traceability of a request.
    # @param [UUID | String] uuid Required parameter: Unique session ID which
    # was generated to activate a charging session.
    # @param [StopChargeSessionRequestBodyJson] body Optional parameter:
    # Example:
    # @return [InlineResponse2021] response from the API call
    def stop_charge_session(request_id,
                            uuid,
                            body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/ev/v1/charge-session/stop/{uuid}',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .template_param(new_parameter(uuid, key: 'uuid')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('BearerAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(InlineResponse2021.method(:from_hash))
                   .local_error('400',
                                "Bad Request\n",
                                M400ErrorResponseError1Exception)
                   .local_error('401',
                                'Unauthorized',
                                M401ErrorResponseError1Exception)
                   .local_error('404',
                                'Session not found or Session has already been stopped. Map 410'\
                                 ' Error message into 404.',
                                M404ErrorResponseError1Exception)
                   .local_error('405',
                                'Method Not Allowed',
                                M405ErrorResponseError1Exception)
                   .local_error('429',
                                'Too Many Requests',
                                M429ErrorResponseError1Exception)
                   .local_error('500',
                                'Internal Server Error',
                                M500ErrorResponseError1Exception)
                   .local_error('503',
                                "Returned when a connectivity failure is encountered like DB'\
                                 ' connection failed, endpoint failed etc or when max number of'\
                                 ' retries are completed\n",
                                M503ErrorResponseError1Exception))
        .execute
    end

    # This API retrieves the status and details of the session which was started
    # by the user. The session ID generated earlier needs to be passed in this
    # API in order to retrieve the status.
    # @param [UUID | String] request_id Required parameter: A unique request id
    # in GUID format. The value is written to the Shell API Platform audit log
    # for end to end traceability of a request.
    # @param [String] session_id Required parameter: Session Id is to be
    # fetched
    # @param [UUID | String] uuid Required parameter: Unique session ID which
    # was generated to activate a charging session.
    # @return [GetChargeSessionRetrieveResponse200Json] response from the API call
    def get_charge_session_retrieve(request_id,
                                    session_id,
                                    uuid)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/ev/v1/charge-session/retrieve/{uuid}',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .query_param(new_parameter(session_id, key: 'SessionId'))
                   .template_param(new_parameter(uuid, key: 'uuid')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('BearerAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(GetChargeSessionRetrieveResponse200Json.method(:from_hash))
                   .local_error('400',
                                'Bad Request',
                                M400ErrorResponseError1Exception)
                   .local_error('401',
                                'Unauthorized',
                                M401ErrorResponseError1Exception)
                   .local_error('404',
                                'Not Found',
                                M404ErrorResponseError1Exception)
                   .local_error('405',
                                'Method Not Allowed',
                                M405ErrorResponseError1Exception)
                   .local_error('429',
                                'Too Many Requests',
                                M429ErrorResponseError1Exception)
                   .local_error('500',
                                'Internal Server Error',
                                M500ErrorResponseError1Exception)
                   .local_error('503',
                                'Service Unavailable',
                                M503ErrorResponseError1Exception))
        .execute
    end

    # This API retrieves the list of active sessions for a given set of EMAIds
    # @param [String] ema_id Required parameter: Emobility Account
    # Identifier(Ema-ID)
    # @param [UUID | String] request_id Required parameter: A unique request id
    # in GUID format. The value is written to the Shell API Platform audit log
    # for end to end traceability of a request.
    # @return [ActiveResponse200Json] response from the API call
    def active(ema_id,
               request_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/ev/v1/charge-session/active',
                                     Server::DEFAULT)
                   .query_param(new_parameter(ema_id, key: 'EmaId'))
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('BearerAuth')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(ActiveResponse200Json.method(:from_hash))
                   .local_error('400',
                                "Bad Request\n",
                                M400ErrorResponseError1Exception)
                   .local_error('401',
                                'Unauthorized',
                                M401ErrorResponseError1Exception)
                   .local_error('404',
                                'Session not found or Session has already been stopped. Map 410'\
                                 ' Error message into 404.',
                                M404ErrorResponseError1Exception)
                   .local_error('405',
                                'Method Not Allowed',
                                M405ErrorResponseError1Exception)
                   .local_error('429',
                                'Too Many Requests',
                                M429ErrorResponseError1Exception)
                   .local_error('500',
                                'Internal Server Error',
                                M500ErrorResponseError1Exception)
                   .local_error('503',
                                "Returned when a connectivity failure is encountered like DB'\
                                 ' connection failed, endpoint failed etc or when max number of'\
                                 ' retries are completed\n",
                                M503ErrorResponseError1Exception))
        .execute
    end
  end
end
