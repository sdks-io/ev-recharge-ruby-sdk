# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # LocationsController
  class LocationsController < BaseController
    # This API provides the list of all Shell Recharge locations. The list
    # includes all Shell Recharge network and all locations available through
    # our roaming partners. The end point provides flexible search criteria in
    # order to get the list of Shell Recharge Network. The end point provides
    # the details such as the exact location/address of the site along with the
    # up-to-date status information of all the charging units in the site.
    # Supported Search Options
    # * Based on status of the Charging units. Eg : Available or Occupied
    # * Based on available connector types.
    # * Based on minimum Power output (in kW) available
    # * Based on a specific charging unit ID (EVSE ID)
    # @param [UUID | String] request_id Required parameter: RequestId must be
    # unique identifier value that can be used by the consumer to correlate each
    # request /response .<br>Format.<br> Its canonical textual representation,
    # the 16 octets of a UUID are represented as 32 hexadecimal (base-16)
    # digits, displayed in five groups separated by hyphens, in the form
    # 8-4-4-4-12 for a total of 36 characters (32 hexadecimal characters and 4
    # hyphens) <br>
    # @param [GetEVLocationsEvseStatusEnum] evse_status Optional parameter:
    # Filter by Locations that have the given status
    # @param [GetEVLocationsConnectorTypesEnum] connector_types Optional
    # parameter: Filter by Locations that have Connectors with the set of
    # Connector Types
    # @param [Float] connector_min_power Optional parameter: Filter by Locations
    # that have a Connector with at least this power output (in kW)
    # @param [GetEVLocationsAuthorizationMethodsEnum] authorization_methods
    # Optional parameter: Filter by Locations that support the given
    # Authorization Methods
    # @param [TrueClass | FalseClass] with_operator_name Optional parameter:
    # Return operator name in marker response object
    # @param [String] evse_id Optional parameter: optional Standard EVSE
    # (Electric Vehicle Supply Equipment) Id identifier (ISO-IEC-15118)
    # @param [String] location_external_id Optional parameter: Filter by
    # Locations with the given externalId. (Unique Location externalID provided
    # by Shell Recharge)
    # @param [String] evse_external_id Optional parameter: Filter by Locations
    # that have an Evse with the given External Id. (Unique individual EVSE
    # externalID provided by Shell Recharge)
    # @param [Integer] page_number Optional parameter: Restrict the response
    # list by providing a specific set of page Number. Set perPage parameter
    # also when page Number is used.
    # @param [Integer] per_page Optional parameter: Restrict the number of sites
    # in response per page.
    # @param [String] updated_since Optional parameter: ZonedDateTime as
    # string
    # @param [Array[String]] country Optional parameter: Filter by Locations
    # that are at least in one of the given countries (specified using ISO
    # 3166-1 alpha-3 codes)
    # @param [Array[String]] exclude_country Optional parameter: Filter by
    # Locations that are not in one of the given countries (specified using ISO
    # 3166-1 alpha-3 codes)
    # @return [Response] response from the API call
    def get_ev_locations(request_id,
                         evse_status: nil,
                         connector_types: nil,
                         connector_min_power: nil,
                         authorization_methods: nil,
                         with_operator_name: nil,
                         evse_id: nil,
                         location_external_id: nil,
                         evse_external_id: nil,
                         page_number: nil,
                         per_page: nil,
                         updated_since: nil,
                         country: nil,
                         exclude_country: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/locations/v1/ev',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .query_param(new_parameter(evse_status, key: 'evseStatus'))
                   .query_param(new_parameter(connector_types, key: 'connectorTypes'))
                   .query_param(new_parameter(connector_min_power, key: 'connectorMinPower'))
                   .query_param(new_parameter(authorization_methods, key: 'authorizationMethods'))
                   .query_param(new_parameter(with_operator_name, key: 'withOperatorName'))
                   .query_param(new_parameter(evse_id, key: 'evseId'))
                   .query_param(new_parameter(location_external_id, key: 'locationExternalId'))
                   .query_param(new_parameter(evse_external_id, key: 'evseExternalId'))
                   .query_param(new_parameter(page_number, key: 'pageNumber'))
                   .query_param(new_parameter(per_page, key: 'perPage'))
                   .query_param(new_parameter(updated_since, key: 'updatedSince'))
                   .query_param(new_parameter(country, key: 'country'))
                   .query_param(new_parameter(exclude_country, key: 'excludeCountry'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('BearerAuth')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Response.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 BadRequestException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid'\
                                  ' authentication credentials for the target resource.',
                                 UnauthorizedException)
                    .local_error('404',
                                 'Location Not Found',
                                 NotFoundException)
                    .local_error('429',
                                 'The Request reached maximum allocated rate limit',
                                 TooManyRequestsException)
                    .local_error('500',
                                 'Internal Server error',
                                 InternalServerErrorException)
                    .local_error('503',
                                 'Service unavailable',
                                 ServiceunavailableException))
        .execute
    end

    # This API provides the details on a single Shell Recharge location.
    # The query for a single location is to be made using the Unique Internal
    # identifier used to refer to this Location by Shell Recharge. (Uid from
    # List of locations API)
    # @param [UUID | String] request_id Required parameter: RequestId must be
    # unique identifier value that can be used by the consumer to correlate each
    # request /response .<br>Format.<br> Its canonical textual representation,
    # the 16 octets of a UUID are represented as 32 hexadecimal (base-16)
    # digits, displayed in five groups separated by hyphens, in the form
    # 8-4-4-4-12 for a total of 36 characters (32 hexadecimal characters and 4
    # hyphens) <br>
    # @param [String] id Required parameter: Unique Uid of the location from
    # List of locations API
    # @param [String] provider_id Optional parameter: The provider id that you
    # wish to see locations and tariffs for
    # @param [String] since Optional parameter: to get the locations modified
    # after a date
    # @return [Response] response from the API call
    def ev_locations_by_id(request_id,
                           id,
                           provider_id: nil,
                           since: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/locations/v1/ev/{id}',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .query_param(new_parameter(provider_id, key: 'providerId'))
                   .query_param(new_parameter(since, key: 'since'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('BearerAuth')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Response.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 BadRequestException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid'\
                                  ' authentication credentials for the target resource.',
                                 UnauthorizedException)
                    .local_error('404',
                                 'Location Not Found',
                                 NotFoundException)
                    .local_error('429',
                                 'The Request reached maximum allocated rate limit',
                                 TooManyRequestsException)
                    .local_error('500',
                                 'Internal Server error',
                                 InternalServerErrorException)
                    .local_error('503',
                                 'Service unavailable',
                                 ServiceunavailableException))
        .execute
    end

    # This API provides the list of all nearby Shell Recharge locations based on
    # the latitude and longitude provided in the request.
    # The list includes all Shell Recharge network and all sites available
    # through our roaming partners.
    # The end point provides the details such as the exact location/address of
    # the site along with the up-to-date status information of all the charging
    # units in the site.
    # Supported Search Options
    # * Based on latitude and longitude of the location. (Mandatory)
    # * Based on status of the Charging units. Eg : Available or Occupied
    # * Based on available connector types.
    # * Based on minimum Power output (in kW) available
    # @param [UUID | String] request_id Required parameter: RequestId must be
    # unique identifier value that can be used by the consumer to correlate each
    # request /response .<br>Format.<br> Its canonical textual representation,
    # the 16 octets of a UUID are represented as 32 hexadecimal (base-16)
    # digits, displayed in five groups separated by hyphens, in the form
    # 8-4-4-4-12 for a total of 36 characters (32 hexadecimal characters and 4
    # hyphens) <br>
    # @param [Float] latitude Required parameter: Latitude to get Shell Recharge
    # Locations nearby
    # @param [Float] longitude Required parameter: Longitude to get Shell
    # Recharge Locations nearby
    # @param [Float] limit Optional parameter: Maximum number of Locations to
    # retrieve
    # @param [String] location_external_id Optional parameter: Filter by
    # Locations with the given externalId Identifier as given by the Shell
    # Recharge Operator, unique for that Operator
    # @param [String] evse_id Optional parameter: Filter by Locations that have
    # an Evse with the given Evse Id
    # @param [String] evse_external_id Optional parameter: Filter by Locations
    # that have an Evse with the given External Id Identifier of the Evse as
    # given by the Operator, unique for that Operator
    # @param [String] operator_name Optional parameter: Filter by Locations that
    # have the given operator
    # @param [NearbyLocationsEvseStatusEnum] evse_status Optional parameter:
    # Filter by Locations that have the given status
    # @param [NearbyLocationsConnectorTypesEnum] connector_types Optional
    # parameter: Filter by Locations that have Connectors with these Connector
    # Types
    # @param [Float] connector_min_power Optional parameter: Filter by Locations
    # that have a Connector with at least this power output (in kW)
    # @param [NearbyLocationsAuthorizationMethodsEnum] authorization_methods
    # Optional parameter: Filter by Locations that support the given
    # Authorization Methods
    # @param [TrueClass | FalseClass] with_operator_name Optional parameter:
    # Return operator name in marker object (only for marker type Single
    # ChargePoint)
    # @param [TrueClass | FalseClass] with_max_power Optional parameter: Return
    # maximum power in kW across all locations grouped in this marker
    # (disregarding availability)
    # @param [Array[String]] country Optional parameter: Filter by Locations
    # that are at least in one of the given countries (specified using ISO
    # 3166-1 alpha-3 codes)
    # @param [Array[String]] exclude_country Optional parameter: Filter by
    # Locations that are not in one of the given countries (specified using ISO
    # 3166-1 alpha-3 codes)
    # @return [Response] response from the API call
    def nearby_locations(request_id,
                         latitude,
                         longitude,
                         limit: 25,
                         location_external_id: nil,
                         evse_id: nil,
                         evse_external_id: nil,
                         operator_name: nil,
                         evse_status: nil,
                         connector_types: nil,
                         connector_min_power: nil,
                         authorization_methods: nil,
                         with_operator_name: nil,
                         with_max_power: nil,
                         country: nil,
                         exclude_country: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/locations/v1/ev/nearby',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .query_param(new_parameter(latitude, key: 'latitude'))
                   .query_param(new_parameter(longitude, key: 'longitude'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .query_param(new_parameter(location_external_id, key: 'locationExternalId'))
                   .query_param(new_parameter(evse_id, key: 'evseId'))
                   .query_param(new_parameter(evse_external_id, key: 'evseExternalId'))
                   .query_param(new_parameter(operator_name, key: 'operatorName'))
                   .query_param(new_parameter(evse_status, key: 'evseStatus'))
                   .query_param(new_parameter(connector_types, key: 'connectorTypes'))
                   .query_param(new_parameter(connector_min_power, key: 'connectorMinPower'))
                   .query_param(new_parameter(authorization_methods, key: 'authorizationMethods'))
                   .query_param(new_parameter(with_operator_name, key: 'withOperatorName'))
                   .query_param(new_parameter(with_max_power, key: 'withMaxPower'))
                   .query_param(new_parameter(country, key: 'country'))
                   .query_param(new_parameter(exclude_country, key: 'excludeCountry'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('BearerAuth')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(Response.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 BadRequestException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid'\
                                  ' authentication credentials for the target resource.',
                                 UnauthorizedException)
                    .local_error('404',
                                 'Location Not Found',
                                 NotFoundException)
                    .local_error('429',
                                 'The Request reached maximum allocated rate limit',
                                 TooManyRequestsException)
                    .local_error('500',
                                 'Internal Server error',
                                 InternalServerErrorException)
                    .local_error('503',
                                 'Service unavailable',
                                 ServiceunavailableException))
        .execute
    end

    # This API, when given a set of bounds on the geographical front (East,West,
    # North, South) will return a set of Markers that fall within the requested
    # bounds. The API will automatically group locations at the same position on
    # the map into one Marker.
    # The API also provide further search options to filter the result set.
    #   * Based on status of the Charging units. Eg : Available or Occupied
    #   * Based on available connector types.
    #   * Based on minimum Power output (in kW) available
    # @param [UUID | String] request_id Required parameter: RequestId must be
    # unique identifier value that can be used by the consumer to correlate each
    # request /response .<br>Format.<br> Its canonical textual representation,
    # the 16 octets of a UUID are represented as 32 hexadecimal (base-16)
    # digits, displayed in five groups separated by hyphens, in the form
    # 8-4-4-4-12 for a total of 36 characters (32 hexadecimal characters and 4
    # hyphens) <br>
    # @param [Float] west Required parameter: Longitude of the western bound to
    # get the Shell Recharge Locations
    # @param [Float] south Required parameter: Latitude of the southern bound to
    # get the Shell Recharge Locations
    # @param [Float] east Required parameter: Longitude of the eastern bound to
    # get the Shell Recharge Locations
    # @param [Float] north Required parameter: Latitude of the northern bound to
    # get the Shell Recharge Locations
    # @param [String] zoom Required parameter: Zoom level to show ex: (1: World,
    # 5: Landmass/continent, 10: City, 15: Streets, 20: Buildings)
    # @param [LocationsMarkersEvseStatusEnum] evse_status Optional parameter:
    # Filter by Locations that have the given status
    # @param [LocationsMarkersConnectorTypesEnum] connector_types Optional
    # parameter: Filter by Locations that have Connectors with the set of
    # Connector Types
    # @param [Float] connector_min_power Optional parameter: Filter by Locations
    # that have a Connector with at least this power output (in kW)
    # @param [LocationsMarkersAuthorizationMethodsEnum] authorization_methods
    # Optional parameter: Filter by Locations that support the given
    # Authorization Methods
    # @param [TrueClass | FalseClass] with_operator_name Optional parameter:
    # Return operator name in marker object (only for marker type
    # SingleChargePoint)
    # @param [TrueClass | FalseClass] with_max_power Optional parameter: Return
    # maximum power in kW across all locations grouped in this marker
    # (disregarding availability)
    # @param [String] location_external_id Optional parameter: Filter by
    # Locations with the given externalId. (Unique Location externalID provided
    # by Shell Recharge)
    # @param [String] evse_id Optional parameter: Filter by Locations that have
    # an Evse with the given Evse Id
    # @param [String] evse_external_id Optional parameter: Filter by Locations
    # that have an Evse with the given External Id Identifier of the Evse as
    # given by the Operator, unique for that Operator
    # @param [String] operator_name Optional parameter: Filter by Locations that
    # have the given operator
    # @param [Array[String]] country Optional parameter: Filter by Locations
    # that are at least in one of the given countries (specified using ISO
    # 3166-1 alpha-3 codes)
    # @param [Array[String]] exclude_country Optional parameter: Filter by
    # Locations that are not in one of the given countries (specified using ISO
    # 3166-1 alpha-3 codes)
    # @return [SingleLocationMarkerResponse] response from the API call
    def locations_markers(request_id,
                          west,
                          south,
                          east,
                          north,
                          zoom,
                          evse_status: nil,
                          connector_types: nil,
                          connector_min_power: nil,
                          authorization_methods: nil,
                          with_operator_name: nil,
                          with_max_power: nil,
                          location_external_id: nil,
                          evse_id: nil,
                          evse_external_id: nil,
                          operator_name: nil,
                          country: nil,
                          exclude_country: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/locations/v1/ev/markers',
                                     Server::DEFAULT)
                   .header_param(new_parameter(request_id, key: 'RequestId'))
                   .query_param(new_parameter(west, key: 'west'))
                   .query_param(new_parameter(south, key: 'south'))
                   .query_param(new_parameter(east, key: 'east'))
                   .query_param(new_parameter(north, key: 'north'))
                   .query_param(new_parameter(zoom, key: 'zoom'))
                   .query_param(new_parameter(evse_status, key: 'evseStatus'))
                   .query_param(new_parameter(connector_types, key: 'connectorTypes'))
                   .query_param(new_parameter(connector_min_power, key: 'connectorMinPower'))
                   .query_param(new_parameter(authorization_methods, key: 'authorizationMethods'))
                   .query_param(new_parameter(with_operator_name, key: 'withOperatorName'))
                   .query_param(new_parameter(with_max_power, key: 'withMaxPower'))
                   .query_param(new_parameter(location_external_id, key: 'locationExternalId'))
                   .query_param(new_parameter(evse_id, key: 'evseId'))
                   .query_param(new_parameter(evse_external_id, key: 'evseExternalId'))
                   .query_param(new_parameter(operator_name, key: 'operatorName'))
                   .query_param(new_parameter(country, key: 'country'))
                   .query_param(new_parameter(exclude_country, key: 'excludeCountry'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('BearerAuth')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SingleLocationMarkerResponse.method(:from_hash))
                    .local_error('400',
                                 'The server cannot or will not process the request due to'\
                                  ' something that is perceived to be a client error (e.g.,'\
                                  ' malformed request syntax, invalid request message framing, or'\
                                  ' deceptive request routing).',
                                 BadRequestException)
                    .local_error('401',
                                 'The request has not been applied because it lacks valid'\
                                  ' authentication credentials for the target resource.',
                                 UnauthorizedException)
                    .local_error('404',
                                 'Location Not Found',
                                 NotFoundException)
                    .local_error('429',
                                 'The Request reached maximum allocated rate limit',
                                 TooManyRequestsException)
                    .local_error('500',
                                 'Internal server error',
                                 InternalServerErrorException)
                    .local_error('503',
                                 'Service unavailable',
                                 ServiceunavailableException))
        .execute
    end
  end
end
