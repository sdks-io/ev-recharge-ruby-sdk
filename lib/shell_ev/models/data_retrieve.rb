# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module ShellEv
  # DataRetrieve Model.
  class DataRetrieve < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Id of the session
    # @return [UUID | String]
    attr_accessor :id

    # Id of the user that started the session
    # @return [String]
    attr_accessor :user_id

    # Id of the evse that the user is charging
    # @return [String]
    attr_accessor :ema_id

    # Ema-id of the charge token that is used
    # @return [String]
    attr_accessor :evse_id

    # When the session is started
    # @return [DateTime]
    attr_accessor :started_at

    # When the session is stopped
    # @return [DateTime]
    attr_accessor :stopped_at

    # Describes the session state
    # @return [DataRetrieveSessionStateEnum]
    attr_accessor :session_state

    # Session code e.g InternalError
    # @return [DataRetrieveSessionCodeEnum]
    attr_accessor :session_code

    # Session message
    # @return [String]
    attr_accessor :session_message

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'Id'
      @_hash['user_id'] = 'UserId'
      @_hash['ema_id'] = 'EmaId'
      @_hash['evse_id'] = 'EvseId'
      @_hash['started_at'] = 'StartedAt'
      @_hash['stopped_at'] = 'StoppedAt'
      @_hash['session_state'] = 'SessionState'
      @_hash['session_code'] = 'SessionCode'
      @_hash['session_message'] = 'SessionMessage'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        user_id
        ema_id
        evse_id
        started_at
        stopped_at
        session_state
        session_code
        session_message
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        stopped_at
        session_code
        session_message
      ]
    end

    def initialize(id = SKIP,
                   user_id = SKIP,
                   ema_id = SKIP,
                   evse_id = SKIP,
                   started_at = SKIP,
                   stopped_at = SKIP,
                   session_state = SKIP,
                   session_code = SKIP,
                   session_message = SKIP)
      @id = id unless id == SKIP
      @user_id = user_id unless user_id == SKIP
      @ema_id = ema_id unless ema_id == SKIP
      @evse_id = evse_id unless evse_id == SKIP
      @started_at = started_at unless started_at == SKIP
      @stopped_at = stopped_at unless stopped_at == SKIP
      @session_state = session_state unless session_state == SKIP
      @session_code = session_code unless session_code == SKIP
      @session_message = session_message unless session_message == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('Id') ? hash['Id'] : SKIP
      user_id = hash.key?('UserId') ? hash['UserId'] : SKIP
      ema_id = hash.key?('EmaId') ? hash['EmaId'] : SKIP
      evse_id = hash.key?('EvseId') ? hash['EvseId'] : SKIP
      started_at = if hash.key?('StartedAt')
                     (DateTimeHelper.from_rfc3339(hash['StartedAt']) if hash['StartedAt'])
                   else
                     SKIP
                   end
      stopped_at = if hash.key?('StoppedAt')
                     (DateTimeHelper.from_rfc3339(hash['StoppedAt']) if hash['StoppedAt'])
                   else
                     SKIP
                   end
      session_state = hash.key?('SessionState') ? hash['SessionState'] : SKIP
      session_code = hash.key?('SessionCode') ? hash['SessionCode'] : SKIP
      session_message =
        hash.key?('SessionMessage') ? hash['SessionMessage'] : SKIP

      # Create object from extracted values.
      DataRetrieve.new(id,
                       user_id,
                       ema_id,
                       evse_id,
                       started_at,
                       stopped_at,
                       session_state,
                       session_code,
                       session_message)
    end

    def to_custom_started_at
      DateTimeHelper.to_rfc3339(started_at)
    end

    def to_custom_stopped_at
      DateTimeHelper.to_rfc3339(stopped_at)
    end
  end
end
