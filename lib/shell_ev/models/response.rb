# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # Response Model.
  class Response < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # requestId is unique identifier value that is attached to requests and
    # messages that allow reference to a particular transaction or event chain.
    # @return [UUID | String]
    attr_accessor :request_id

    # status of the API call
    # @return [String]
    attr_accessor :status

    # API Response
    # @return [Array[LocationResponeObject]]
    attr_accessor :data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['request_id'] = 'requestId'
      @_hash['status'] = 'status'
      @_hash['data'] = 'data'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        request_id
        status
        data
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(request_id = SKIP, status = SKIP, data = SKIP)
      @request_id = request_id unless request_id == SKIP
      @status = status unless status == SKIP
      @data = data unless data == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      request_id = hash.key?('requestId') ? hash['requestId'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      # Parameter is an array, so we need to iterate through it
      data = nil
      unless hash['data'].nil?
        data = []
        hash['data'].each do |structure|
          data << (LocationResponeObject.from_hash(structure) if structure)
        end
      end

      data = SKIP unless hash.key?('data')

      # Create object from extracted values.
      Response.new(request_id,
                   status,
                   data)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} request_id: #{@request_id}, status: #{@status}, data: #{@data}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} request_id: #{@request_id.inspect}, status: #{@status.inspect}, data:"\
      " #{@data.inspect}>"
    end
  end
end
