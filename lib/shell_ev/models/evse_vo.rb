# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # Each Location will contain one or more EVSEs (Electric Vehicle Supply
  # Equipment). Each EVSE is capable of charging one car at a time.
  class EvseVO < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Internal identifier used to refer to single individual  EVSE unit.
    # @return [Integer]
    attr_accessor :uid

    # Identifier of the Evse as given by the Operator, unique for that Operator
    # @return [String]
    attr_accessor :external_id

    # Standard EVSEId identifier (ISO-IEC-15118)
    # @return [String]
    attr_accessor :evse_id

    # The current status of the EVSE units availability
    # @return [EvseVOStatusEnum]
    attr_accessor :status

    # List of all connectors available on this EVSE unit.
    # @return [Array[ConnectorVO]]
    attr_accessor :connectors

    # Methods that can be used to Authorize sessions on this EVSE
    # @return [EvseVOAuthorizationMethodsEnum]
    attr_accessor :authorization_methods

    # ISO8601-compliant UTC datetime of the last update of the EVSE
    # @return [String]
    attr_accessor :updated

    # optional  ISO8601-compliant UTC deletion timestamp of the Evse
    # @return [String]
    attr_accessor :deleted

    # An optional number/string printed on the outside of the EVSE for visual
    # identification
    # @return [String]
    attr_accessor :physical_reference

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['uid'] = 'uid'
      @_hash['external_id'] = 'externalId'
      @_hash['evse_id'] = 'evseId'
      @_hash['status'] = 'status'
      @_hash['connectors'] = 'connectors'
      @_hash['authorization_methods'] = 'authorizationMethods'
      @_hash['updated'] = 'updated'
      @_hash['deleted'] = 'deleted'
      @_hash['physical_reference'] = 'physicalReference'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        uid
        external_id
        evse_id
        status
        connectors
        authorization_methods
        updated
        deleted
        physical_reference
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(uid = SKIP, external_id = SKIP, evse_id = SKIP,
                   status = SKIP, connectors = SKIP,
                   authorization_methods = SKIP, updated = SKIP, deleted = SKIP,
                   physical_reference = SKIP)
      @uid = uid unless uid == SKIP
      @external_id = external_id unless external_id == SKIP
      @evse_id = evse_id unless evse_id == SKIP
      @status = status unless status == SKIP
      @connectors = connectors unless connectors == SKIP
      @authorization_methods = authorization_methods unless authorization_methods == SKIP
      @updated = updated unless updated == SKIP
      @deleted = deleted unless deleted == SKIP
      @physical_reference = physical_reference unless physical_reference == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      uid = hash.key?('uid') ? hash['uid'] : SKIP
      external_id = hash.key?('externalId') ? hash['externalId'] : SKIP
      evse_id = hash.key?('evseId') ? hash['evseId'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      # Parameter is an array, so we need to iterate through it
      connectors = nil
      unless hash['connectors'].nil?
        connectors = []
        hash['connectors'].each do |structure|
          connectors << (ConnectorVO.from_hash(structure) if structure)
        end
      end

      connectors = SKIP unless hash.key?('connectors')
      authorization_methods =
        hash.key?('authorizationMethods') ? hash['authorizationMethods'] : SKIP
      updated = hash.key?('updated') ? hash['updated'] : SKIP
      deleted = hash.key?('deleted') ? hash['deleted'] : SKIP
      physical_reference =
        hash.key?('physicalReference') ? hash['physicalReference'] : SKIP

      # Create object from extracted values.
      EvseVO.new(uid,
                 external_id,
                 evse_id,
                 status,
                 connectors,
                 authorization_methods,
                 updated,
                 deleted,
                 physical_reference)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} uid: #{@uid}, external_id: #{@external_id}, evse_id: #{@evse_id}, status:"\
      " #{@status}, connectors: #{@connectors}, authorization_methods: #{@authorization_methods},"\
      " updated: #{@updated}, deleted: #{@deleted}, physical_reference: #{@physical_reference}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} uid: #{@uid.inspect}, external_id: #{@external_id.inspect}, evse_id:"\
      " #{@evse_id.inspect}, status: #{@status.inspect}, connectors: #{@connectors.inspect},"\
      " authorization_methods: #{@authorization_methods.inspect}, updated: #{@updated.inspect},"\
      " deleted: #{@deleted.inspect}, physical_reference: #{@physical_reference.inspect}>"
    end
  end
end
