# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # ChargeRetrieveState Model.
  class ChargeRetrieveState < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Describes the session state
    # started, stopped, start-requested, stop-requested, failed-to-start,
    # failed-to-stop
    # @return [String]
    attr_accessor :status

    # Describes the session state
    # started, stopped, start-requested, stop-requested, failed-to-start,
    # failed-to-stop
    # @return [ChargeError]
    attr_accessor :error

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['status'] = 'status'
      @_hash['error'] = 'error'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        status
        error
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(status = SKIP, error = SKIP)
      @status = status unless status == SKIP
      @error = error unless error == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      status = hash.key?('status') ? hash['status'] : SKIP
      error = ChargeError.from_hash(hash['error']) if hash['error']

      # Create object from extracted values.
      ChargeRetrieveState.new(status,
                              error)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} status: #{@status}, error: #{@error}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} status: #{@status.inspect}, error: #{@error.inspect}>"
    end
  end
end
