# shell_ev
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ShellEv
  # SingleLocationMarkerResponse Model.
  class SingleLocationMarkerResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # requestId is unique identifier value that is attached to requests and
    # messages that allow reference to a particular transaction or event chain.
    # @return [UUID | String]
    attr_accessor :request_id

    # status of the API call
    # @return [String]
    attr_accessor :status

    # status of the API call
    # @return [Array[Object]]
    attr_accessor :data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['request_id'] = 'requestId'
      @_hash['status'] = 'status'
      @_hash['data'] = 'data'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        request_id
        status
        data
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(request_id = SKIP, status = SKIP, data = SKIP)
      @request_id = request_id unless request_id == SKIP
      @status = status unless status == SKIP
      @data = data unless data == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      request_id = hash.key?('requestId') ? hash['requestId'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      data = hash.key?('data') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:LocationMarker), hash['data']
      ) : SKIP

      # Create object from extracted values.
      SingleLocationMarkerResponse.new(request_id,
                                       status,
                                       data)
    end

    # Validates an instance of the object from a given value.
    # @param [SingleLocationMarkerResponse | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end
  end
end
